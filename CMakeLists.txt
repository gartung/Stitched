
cmake_minimum_required(VERSION 3.12)
project(Framework VERSION 0.0.0 LANGUAGES C CXX)
set(BUILDTEST True)
include(CTest)
enable_testing()
cmake_policy( SET CMP0082 NEW)
find_package(ROOT 6.12.0 COMPONENTS Rint Thread Cling Core MathCore MathMore Matrix Minuit Minuit2 Physics MLP Foam Hist Spectrum Tree TreePlayer RIO XMLIO Net Gpad Graf Postscript Graf3d Eve RGL Gui GuiHtml Html EG Geom GeomBuilder PyROOT TMVA)
include(GNUInstallDirs)
include(${ROOT_USE_FILE})
set(Boost_NO_BOOST_CMAKE ON)
set(Boost_NO_SYSTEM_PATHS ON)
find_package(Boost 1.67.0 COMPONENTS filesystem thread iostreams python27 regex serialization system program_options )
find_package(Python2 COMPONENTS Interpreter Development)
find_package(Threads)
find_package(CMakeTools)
find_package(benchmark)
UseCMakeTools()
include(GoogleTest)
find_package(Xrootd)
find_package(CLHEP)
find_package(CMSMD5)
find_package(CppUnit)
find_package(OpenSSL)
find_package(TBB)
find_package(TINYXML2)
find_package(UUID)
find_package(XercesC)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-attributes")
set(pythondir ${CMAKE_BINARY_DIR}/python)
file(MAKE_DIRECTORY ${pythondir})
file(WRITE  "${pythondir}/__init__.py" "#autogenerated" )


macro(edmpluginrefresh name)
      message("edmpluginrefresh ${CMAKE_BINARY_DIR}/bin/edmPluginRefresh ${CMAKE_BINARY_DIR}/lib/plugin*.so")
      set(ENV{LD_LIBRARY_PATH} "${CMAKE_BINARY_DIR}/lib:$ENV{LD_LIBRARY_PATH}")
      add_custom_command(TARGET ${name} PRE_BUILD
      COMMAND ${CMAKE_BINARY_DIR}/bin/edmPluginRefresh "${CMAKE_BINARY_DIR}/lib/plugin*.so"
      )
endmacro()

macro(edmplugingen name)
      add_custom_command(TARGET ${name} POST_BUILD
      COMMAND echo "module plugin${name}" >${CMAKE_BINARY_DIR}/lib/plugin${name}.edmplugin
      )
endmacro()


macro(cms_rootdict name)
  if("${ARGN}" STREQUAL "")
    set(classes_h classes.h)
    set(classes_xml classes_def.xml)
    set(${name}_ROOTDICT ${name}_x)
  else()
    set(classes_h ${ARGV1})
    set(classes_xml ${ARGV2})
    if(${name}_ROOTDICT)
      MATH(EXPR ${name}_DICT_COUNT "${${name}_DICT_COUNT}+1")
      set(${name}_ROOTDICT ${name}_x${${name}_DICT_COUNT})
    else()
      set(${name}_DICT_COUNT 0)
      set(${name}_ROOTDICT ${name}_x)
    endif()
  endif()
  set(${name}_EXTRA_SOURCES ${${name}_EXTRA_SOURCES} ${CMAKE_CURRENT_BINARY_DIR}/${${name}_ROOTDICT}.cc)
  set(${name}_ROOTDICTS ${${name}_ROOTDICTS} ${${name}_ROOTDICT})
  set(ROOTDICT_${${name}_ROOTDICT} ${classes_h} ${classes_xml} ${CMAKE_CURRENT_BINARY_DIR}/${${name}_ROOTDICT}.cc)
  unset(clases_h)
  unset(classes_xml)
endmacro()

macro(add_rootdict_rules name)
  set(flags "")
  get_directory_property(defs COMPILE_DEFINITIONS)
  if(defs)
    foreach(d ${defs})
      set(flags ${flags} -D${d})
    endforeach()
  endif()
  get_directory_property(dirs INCLUDE_DIRECTORIES)
  if(dirs)
    foreach(inc ${dirs})
      set(flags ${flags} -I${inc})
    endforeach()
  endif()
  foreach(dict ${${name}_ROOTDICTS})
    list(GET ROOTDICT_${dict} 0 classes_h)
    list(GET ROOTDICT_${dict} 1 classes_xml)
    list(GET ROOTDICT_${dict} 2 classes_cc)
    get_filename_component(classname ${classes_h} NAME_WE)
    set_source_files_properties(${classes_cc} PROPERTIES COMPILE_FLAGS "-Os -Wno-unused-variable")
    add_custom_command(OUTPUT ${classes_cc}
                    COMMAND ${ROOT_genreflex_CMD} ${CMAKE_CURRENT_SOURCE_DIR}/${classes_h}
                    -s ${CMAKE_CURRENT_SOURCE_DIR}/${classes_xml}
                    -o ${classes_cc}
                    --deep
                    --rootmap=${CMAKE_BINARY_DIR}/lib/${dict}.rootmap
                    --rootmap-lib=${CMAKE_BINARY_DIR}/lib/lib${name}.so
                    --library ${CMAKE_BINARY_DIR}/lib/lib${name}.so --multiDict
                    -DCMS_DICT_IMPL -D_REENTRANT -DGNUSOURCE -D__STRICT_ANSI__ ${FLAGS} -DCMSSW_REFLEX_DICT -I${CMAKE_CURRENT_SOURCE_DIR} 
                    -I${CMAKE_SOURCE_DIR} ${flags}
                    DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/${classes_h} ${CMAKE_CURRENT_SOURCE_DIR}/${classes_xml}
                    )
  endforeach()
  unset(clases_h)
  unset(classes_xml)
  unset(classname)
  unset(FLAGS)
endmacro()

macro(add_python_rules target)
  file(GLOB pyfiles ${CMAKE_CURRENT_SOURCE_DIR}/python/*.py)
  file(GLOB tpyfiles ${CMAKE_CURRENT_SOURCE_DIR}/python/test/*.py)
  file(GLOB cfifiles ${CMAKE_CURRENT_SOURCE_DIR}/python/*_cfi.py)
  set(pythondir ${CMAKE_BINARY_DIR}/python/${target})
  get_filename_component(pdir ${pythondir} DIRECTORY)
  if(pyfiles OR tpyfiles)
      file(MAKE_DIRECTORY ${pdir})
      file(CREATE_LINK ${CMAKE_CURRENT_SOURCE_DIR}/python ${pythondir} SYMBOLIC)
      if(cfifiles)
          set(cfidir ${CMAKE_BINARY_DIR}/cfipython/${target})
          file(MAKE_DIRECTORY ${cfidir})
          file(COPY ${cfifiles} DESTINATION ${cfidir})
      endif()
      set(dnames "")
      foreach(file ${tpyfiles})
          get_filename_component(dname ${file} DIRECTORY)
          list(APPEND dnames ${dname})
      endforeach()
      if(dnames)
          list(REMOVE_DUPLICATES dnames)
          foreach(dir ${dnames})
              file(WRITE "${dir}/__init__.py" "#autogenerated by add_python_rules")
          endforeach()
      endif()
      file(WRITE "${pythondir}/__init__.py" "#autogenerated by add_python_rules
import os
__path__.append(os.path.dirname(os.path.abspath(__file__).rsplit('/python/${target}',1)[0])+'/cfipython/${target}')
")
  endif()
  unset(pyfiles)
  unset(tpyfiles)
  unset(cfifiles)
  unset(pythondir)
endmacro()

add_subdirectory(DataFormats)
install(DIRECTORY DataFormats DESTINATION ${CMAKE_INSTALL_PREFIX}/src)
add_subdirectory(FWCore)
install(DIRECTORY FWCore DESTINATION ${CMAKE_INSTALL_PREFIX}/src)
add_subdirectory(IOMC)
install(DIRECTORY IOMC DESTINATION ${CMAKE_INSTALL_PREFIX}/src)
add_subdirectory(IOPool)
install(DIRECTORY IOPool DESTINATION ${CMAKE_INSTALL_PREFIX}/src)
add_subdirectory(SimDataFormats)
install(DIRECTORY SimDataFormats DESTINATION ${CMAKE_INSTALL_PREFIX}/src)
add_subdirectory(Utilities)
install(DIRECTORY Utilities DESTINATION ${CMAKE_INSTALL_PREFIX}/src)

install(FILES CMakeLists.txt DESTINATION ${CMAKE_INSTALL_PREFIX}/src)
#install(DIRECTORY cmaketools DESTINATION ${CMAKE_INSTALL_PREFIX}/src PATTERN ".git" EXCLUDE)
#install(DIRECTORY buildfile2cmake DESTINATION ${CMAKE_INSTALL_PREFIX}/src PATTERN ".git" EXCLUDE)
